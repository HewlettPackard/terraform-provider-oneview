package main

import (
	"fmt"
	"github.com/HewlettPackard/oneview-golang/ov"
	"github.com/HewlettPackard/oneview-golang/utils"
	"os"
	"strconv"
)

func main() {
	var (
		ClientOV *ov.OVClient
	)
	apiversion, _ := strconv.Atoi(os.Getenv("ONEVIEW_APIVERSION"))
	ovc := clientOV.NewOVClient(
		os.Getenv("ONEVIEW_OV_USER"),
		os.Getenv("ONEVIEW_OV_PASSWORD"),
		os.Getenv("ONEVIEW_OV_DOMAIN"),
		os.Getenv("ONEVIEW_OV_ENDPOINT"),
		false,
		apiversion,
		"*")

	// Retrieve email notification details with configured filters
	emailNotifications, err := ovc.GetEmailNotifications("", "", "", "")
	if err != nil {
		panic(err)
	} else {
		fmt.Println("#---Get Email Notifications----#")
		fmt.Println(emailNotifications)

	}

	// Retrieve email notification filter names for a given scope
	filter := "scope:scopename1"
	emailNotificationsByFilter, err := ovc.GetEmailNotificationsByFilter(filter, "", "", "")
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("#-------------Get Email Notifications by Filter----------------#")
		fmt.Println(emailNotificationsByFilter)
	}

	// Retrieve test email notification configuration details
	emailNotificationConfiguration, err := ovc.GetEmailNotificationsConfiguration("", "", "", "")
	if err != nil {
		fmt.Println(err)
	} else {
		fmt.Println("#-------------Get Email Notifications by Configuration----------------#")
		fmt.Println(emailNotificationConfiguration)
	}

	// Sends test email from appliance to specified user(s).
	toAddress := &[]utils.Nstring{utils.NewNstring("email1@example.com")}
	testEmail := ov.TestEmailRequest{
		HtmlMessageBody: "Html alert message with html and css content",
		Subject:         "Critical alert generated",
		TextMessageBody: "Plain text mail content",
		ToAddress:       *toAddress,
	}

	err1 := ovc.SendTestEmail(testEmail)
	if err1 != nil {
		fmt.Println("Sending TestEmail Failed: ", err1)
	} else {
		fmt.Println("TestEmail sent successfully...")
	}

	// Sends email from appliance to specified user
	email = ov.TestEmailRequest{
		HtmlMessageBody: "Html alert message with html and css content",
		Subject:         "Critical alert generated",
		TextMessageBody: "Plain text mail content",
		ToAddress:       *toAddress,
	}
	err2 := ovc.SendEmail(email)
	if err2 != nil {
		fmt.Println("Sending Email Failed: ", err2)
	} else {
		fmt.Println("Email sent successfully...")
	}

	// Configure the appliance to send an email notification, generated by specified alert filter queries.
	emails := &[]utils.Nstring{utils.NewNstring("email1@example.com")}
	alertEmailFilter1 = ov.AlertEmailFilters{
		Disabled:        false,
		DisplayFilter:   "status:warning status:critical",
		Emails:          *emails,
		Filter:          "status:'warning' or  status:'critical'",
		UserQueryFilter: "CPU",
		Limit:           3,
		LimitDuration:   "minute",
		ScopeQuery:      "scope:'windows'",
		FilterName:      "Critical Alerts",
	}
	alertEmailFilters = new([]ov.AlertEmailFilters)
	*alertEmailFilters = append(*alertEmailFilters, alertEmailFilter1)
	configuration = ov.EmailNotification{
		AlertEmailDisabled: false,
		AlertEmailFilters:  *alertEmailFilters,
		Password:           "some password",
		SenderEmailAddress: "sender@example.com",
		SmtpPort:           25,
		SmtpServer:         "smtp.example.com",
		SmtpProtocol:       "TLS",
	}
	err3 := ovc.ConfigureAppliance(configuration)
	if err3 != nil {
		fmt.Println("Sending Email Failed: ", err3)
	} else {
		fmt.Println("Email sent successfully...")
	}
}
